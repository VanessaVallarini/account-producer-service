// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "account-producer-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IAccountService is an autogenerated mock type for the IAccountService type
type IAccountService struct {
	mock.Mock
}

// CreateOrUpdateAccount provides a mock function with given fields: ctx, ae
func (_m *IAccountService) CreateOrUpdateAccount(ctx context.Context, ae models.AccountCreateRequest) error {
	ret := _m.Called(ctx, ae)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountCreateRequest) error); ok {
		r0 = rf(ctx, ae)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, ae
func (_m *IAccountService) Delete(ctx context.Context, ae models.AccountRequestByEmail) error {
	ret := _m.Called(ctx, ae)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountRequestByEmail) error); ok {
		r0 = rf(ctx, ae)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *IAccountService) GetAll(ctx context.Context) ([]models.Account, error) {
	ret := _m.Called(ctx)

	var r0 []models.Account
	if rf, ok := ret.Get(0).(func(context.Context) []models.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, ade
func (_m *IAccountService) GetByEmail(ctx context.Context, ade models.AccountRequestByEmail) (*models.Account, error) {
	ret := _m.Called(ctx, ade)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountRequestByEmail) *models.Account); ok {
		r0 = rf(ctx, ade)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.AccountRequestByEmail) error); ok {
		r1 = rf(ctx, ade)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAccountService creates a new instance of IAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAccountService(t mockConstructorTestingTNewIAccountService) *IAccountService {
	mock := &IAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
